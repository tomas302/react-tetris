{"version":3,"sources":["components/ControlInformation/index.js","components/Cell/index.js","containers/cell.js","constants.js","components/Matrix/index.js","containers/matrix.js","actions/index.js","components/Tetromino/index.js","components/NextBox/index.js","containers/next.js","components/HoldBox/index.js","containers/hold.js","components/StatsBox/index.js","containers/stat.js","components/PauseButton/index.js","components/FullScreenButton/index.js","components/VolumeButton/index.js","components/Leaderboard/index.js","components/GameOverModal/index.js","containers/gameover.js","components/Game/index.js","containers/game.js","reducers/timer.js","reducers/matrix.js","reducers/next.js","reducers/hold.js","reducers/stat.js","reducers/gravity.js","reducers/gameKey.js","reducers/game.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["ControlInformation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOpenModal","bind","assertThisInitialized","handleCloseModal","handler","event","controls","openButton","isMobile","react_default","a","createElement","Fragment","id","className","startScreen","onClick","lib_default","ariaHideApp","isOpen","open","contentLabel","overlayClassName","React","Component","Cell","matrix","x","y","tetromino","ghost","connect","store","WIDTH","HEIGHT","Matrix","state","initialMatrix","column","push","containers_cell","key","resetGameState","gameKey","type","changeMatrix","cells","addScore","points","startTimer","delay","fn","types","shape","I","J","L","O","S","T","Z","getRandomTetromino","amount","nextList","Error","tetrominos","availableTetro","slice","undefined","i","length","j","splice","randomIndex","Math","floor","random","typesLeft","remove","getTetrominoProperties","changeTetrominoPosition","newPosition","dispatch","newOrientation","ghostY","orientation","pastCells","pastGhostsCells","ghostCells","tetrominoProps","cellsToChange","ghostsCells","forEach","coord","NextCell","NextBox","nextTetrominos","totalCells","size","_loop","_loop2","print","element","NextBox_NextCell","HoldCell","HoldBox","holding","tetrominoHeld","width","HoldBox_HoldCell","StatsBox","score","level","lines","stats","PauseButton","handleBackToStart","paused","backToStart","icon","text","test","navigator","userAgent","components_ControlInformation","controlHandler","openControls","FullScreenButton","isChromium","window","chrome","winNav","vendorName","vendor","isOpera","opr","isIEedge","indexOf","fullscreen","VolumeButton","mute","Leaderboard","_this$props$newRecord","newRecord","_this$props$newRecord2","slicedToArray","isNewRecord","name","setNewRecord","onChange","setState","e","target","value","htmlFor","style","textAlign","data","rows","float","GameOverModal","handlePlayAgain","handleStartScreen","restartGameHandler","startScreenHandler","gameOver","components_Leaderboard","leaderboardData","Game","storage","localStorage","getItem","JSON","parse","leaderboard","running","innerWidth","showingControls","rotate","canRotate","moveX","pushDown","waitingToHold","dropHard","timeDropped","Date","now","lastTimeGravityWasApplied","_music","createRef","startGame","listenForGestures","gameTick","restartGame","returnToStartMenu","spawnNextTetromino","linesAchieved","turnTetrominoIntoCells","moveTetromino","rotationCalculations","rotateTetromino","cleanCurrentTetromino","holdTetromino","dropItHard","calculateGhostPieceY","handlePauseButton","handleKeyDown","handleKeyUp","handleResize","handleFullscreenClick","onFullscreenChange","switchMute","switchControls","document","onfullscreenchange","_this2","addEventListener","onunload","setItem","stringify","removeEventListener","currentTetro","matrixDOM","_this3","mc","Hammer","add","Swipe","direction","DIRECTION_UP","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_DOWN","on","ev","timer","_mc","gravityInterval","refreshApp","next","waitForHolding","nextTetromino","newTetrominoObject","ghostPosition","position","some","cell","spawnTetromino","getCellsByMoving","completedLines","newMatrix","rowToClean","amountToMove","lowerLine","copyMatrix","currentLevel","possibleLines","storedLine","complete","sort","_this4","pastPosition","currentShape","currentCells","canMove","newX","newY","el","tempCells","checkCollisionsByMoving","finalX","finalY","_changeTetrominoPosit","_changeTetrominoPosit2","objectSpread","_this5","nextShape","result","_changeTetrominoPosit3","_changeTetrominoPosit4","currentTetrominoType","dropAmount","tetro","assign","exitFullscreen","body","requestFullscreen","pop","_this6","maxWidth","backgroundColor","color","display","current","play","pause","pauseButton","components_PauseButton","gameOverModal","gameover","ref","src","loop","hold","components_VolumeButton","components_FullScreenButton","containers_stat","containers_next","rel","href","justifyContent","containers_matrix","gestureListener","_matrix","flexDirection","alignItems","accurateInterval","time","cancel","nextAt","timeout","wrapper","getTime","setTimeout","clearTimeout","arguments","action","getInitialMatrix","defaultState","stat","addLevel","pastLinesStr","toString","newLinesStr","gravity","newGravity","game","appReducers","combineReducers","rootReducer","createStore","originalEvent","scale","preventDefault","App","startAgain","forceUpdate","es","containers_game","getState","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37085fda.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport './ControlInformation.css';\r\n\r\nclass ControlInformation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n\r\n    handleOpenModal() {\r\n        this.props.handler();\r\n    }\r\n\r\n    handleCloseModal(event) {\r\n        this.props.handler();\r\n    }\r\n\r\n    render() {\r\n        let controls;\r\n        if (!this.props.isMobile) {\r\n            controls = <div id=\"ControlInformation\">\r\n                <h3><u>HOW TO PLAY</u></h3>\r\n                <ul>\r\n                    <li>MOVE: <i className=\"fas fa-arrow-left\"></i> <i className=\"fas fa-arrow-right\"></i></li>\r\n                    <li>ROTATE: <i className=\"fas fa-arrow-up\"></i></li>\r\n                    <li>FALL FASTER: <i className=\"fas fa-arrow-down\"></i></li>\r\n                    <li>HARD DROP: Space</li>\r\n                    <li>HOLD: C</li>\r\n                </ul>\r\n            </div>;\r\n        } else {\r\n            return <React.Fragment></React.Fragment>\r\n        }\r\n        \r\n        let openButton;\r\n        if (this.props.startScreen) {\r\n            openButton = <button onClick={ this.handleOpenModal }  id=\"OpenControlsButton\" className=\"btn btn-warning start-screen\" >HOW TO PLAY</button>;\r\n        } else {\r\n            openButton = <button onClick={ this.handleOpenModal }  id=\"OpenControlsButton\" className=\"btn btn-warning\" ><i className=\"fas fa-book\"></i></button>;\r\n        }\r\n        return <div>\r\n            { openButton }\r\n            <ReactModal\r\n                ariaHideApp={false}\r\n                isOpen={ this.props.open }\r\n                contentLabel=\"HOW TO PLAY\"\r\n                className=\"ControlsModal\"\r\n                overlayClassName=\"ControlsOverlay\"\r\n            >\r\n                {controls}\r\n                <button id=\"CloseControlsButton\" className=\"btn btn-danger\" onClick={ this.handleCloseModal } >BACK</button>\r\n            </ReactModal>\r\n        </div>;\r\n    }\r\n};\r\n\r\nexport default ControlInformation;","import React from 'react';\r\n\r\nconst Cell = (props) => {\r\n    return <div className={ \"cell \" + props.matrix[props.x][props.y].tetromino + ((props.matrix[props.x][props.y].ghost) ? \" ghost\" : \"\") }></div>;\r\n}\r\n\r\nexport default Cell;","import {connect} from \"react-redux\";\r\nimport Cell from '../components/Cell';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        matrix: store.matrix,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (Cell);","const WIDTH=10;\r\nconst HEIGHT=15;\r\n\r\nexport { WIDTH, HEIGHT };","import React, { Component } from 'react';\r\n//import ReactDOM from 'react-dom';\r\nimport Cell from '../../containers/cell';\r\n\r\nimport { WIDTH, HEIGHT } from '../../constants';\r\n\r\n// Component that contains the grid of cells and displays the game\r\nclass Matrix extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: []\r\n        };\r\n\r\n        const initialMatrix = [];\r\n        for (let y = 0; y < HEIGHT; y++) {\r\n            let column = [];\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                column.push(<Cell key={ x * WIDTH + y * HEIGHT } x={ x } y={ y } />);\r\n            }\r\n            initialMatrix.push(column);\r\n        }\r\n        this.state.matrix = initialMatrix;\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        this.props.gestureListener(ReactDOM.findDOMNode(this));\r\n    }*/\r\n\r\n\r\n    render() {\r\n        return <div id=\"Matrix\">\r\n            { this.state.matrix }\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Matrix;","import {connect} from \"react-redux\";\r\nimport Matrix from '../components/Matrix/';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        matrix: store.matrix,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (Matrix);","// game\r\nexport const resetGameState = (gameKey) => ({\r\n    type: 'RESET_GAME_STATE',\r\n    gameKey: gameKey\r\n})\r\n\r\n// matrix\r\nexport const changeMatrix = (cells, tetromino, ghost) => ({\r\n    type: 'CHANGE_MATRIX',\r\n    cells: cells,\r\n    tetromino: tetromino,\r\n    ghost: ghost\r\n})\r\n\r\nexport const copyMatrix = (newMatrix, lowerLine) => ({\r\n    type: 'COPY_MATRIX',\r\n    newMatrix: newMatrix,\r\n    lowerLine: lowerLine\r\n})\r\n\r\n// NextBox\r\nexport const initNextTetrominos = (currentTetro) => ({\r\n    type: 'INIT_NEXT_TETROMINOS',\r\n    currentTetro: currentTetro\r\n})\r\n\r\nexport const loadNewTetromino = () => ({\r\n    type: 'LOAD_NEW_TETROMINO'\r\n})\r\n\r\n// StatsBox\r\n\r\nexport const addScore = (points) => ({\r\n    type: 'ADD_SCORE',\r\n    points: points\r\n})\r\n\r\nexport const addLines = (lines) => ({\r\n    type: 'ADD_LINES',\r\n    lines: lines\r\n})\r\n\r\n// HoldBox\r\nexport const holdCurrentTetromino = (tetromino) => ({\r\n    type: 'HOLD',\r\n    tetromino: tetromino\r\n})\r\n\r\n// timer\r\nexport const startTimer = (delay, fn) => ({\r\n    type: 'START_TIMER',\r\n    delay: delay,\r\n    fn: fn\r\n})\r\n\r\nexport const stopTimer = () => ({\r\n    type: 'STOP_TIMER'\r\n})\r\n\r\n// gravity\r\nexport const reduceGravity = (amount) => ({\r\n    type: 'REDUCE_GRAVITY',\r\n    amount: amount\r\n})","import { changeMatrix } from '../../actions';\r\n\r\nconst types = [\r\n    \"I\",\r\n    \"J\",\r\n    \"L\",\r\n    \"O\",\r\n    \"S\",\r\n    \"T\",\r\n    \"Z\"\r\n];\r\n/*\r\n    This object defines the shape of each type of Tetromino taking as relative center the rotation center defined by the official Super Rotation System(https://tetris.fandom.com/wiki/SRS).\r\n    Because I need to have an actual coordinate in the cell grid (x, y) for performing the rotation,\r\n    the Tetrominos \"I\" and \"O\" will use the closer block to the top right of the original rotation center defined in the SRS.\r\n\r\n    So, for each Tetromino, I define their constituent blocks around the block that the SRS defines as center for rotation,\r\n    except for the Tetrominos \"I\" and \"O\", taking the center block as the center for the coordinates.\r\n\r\n    Also, there are 4 arrays for each Tetromino, for each of their possible rotations, with the position in (0, 0) taken for granted.\r\n\r\n    I follow this image for the order of the rotations => https://vignette.wikia.nocookie.net/tetrisconcept/images/3/3d/SRS-pieces.png/revision/latest?cb=20060626173148\r\n*/\r\nconst shape = {\r\n    I: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [0, 2],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 1],\r\n            [1, 1],\r\n            [-1, 1],\r\n            [-2, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [-1, 1],\r\n            [-1, 2],\r\n        ]\r\n    ],\r\n    J: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [-1, -1],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [1, -1],\r\n            [0, 1],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [0, -1],\r\n        ]\r\n    ],\r\n    L: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [1, -1],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [1, 1],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [-1, -1],\r\n            [0, 1],\r\n        ]\r\n    ],\r\n    O: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n            [-1, 0],\r\n        ]\r\n    ],\r\n    S: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [1, -1],\r\n            [0, -1],\r\n            [-1, 0],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [-1, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [0, 1],\r\n        ]\r\n    ],\r\n    T: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [0, -1],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [1, 0],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [0, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, 1],\r\n            [-1, 0],\r\n        ]\r\n    ],\r\n    Z: [\r\n        // default rotation\r\n        [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [-1, -1],\r\n        ],\r\n        // second rotation\r\n        [\r\n            [0, 0],\r\n            [1, -1],\r\n            [1, 0],\r\n            [0, 1],\r\n        ],\r\n        // third rotation\r\n        [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [0, 1],\r\n            [1, 1],\r\n        ],\r\n        // fourth rotation\r\n        [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, -1],\r\n        ]\r\n    ]\r\n};\r\n\r\nconst getRandomTetromino = (amount, nextList) => {\r\n    if (amount) {\r\n        if (amount > 10) throw Error(\"Why do you need so many Tetrominos??\");\r\n        let tetrominos = [];\r\n        let availableTetro = types.slice();\r\n        if (nextList !== undefined) {\r\n            for (let i = 0; i < availableTetro.length; i++) {\r\n                for (let j = 0; j < nextList.length; j++) {\r\n                    if (availableTetro[i] === nextList[j]) {\r\n                        availableTetro.splice(i, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < amount; i++) {\r\n            if (i % types.length === 0 && i !== 0) {\r\n                availableTetro = types.slice();\r\n            }\r\n            let randomIndex = Math.floor(Math.random() * availableTetro.length);\r\n            tetrominos.push(availableTetro[randomIndex]);\r\n            availableTetro.splice(randomIndex, 1);\r\n        }\r\n        return tetrominos;\r\n    }\r\n    let typesLeft = types.slice();\r\n    if (nextList !== undefined)\r\n        for (let i = typesLeft.length - 1; i >= 0; i--) {\r\n            let remove = false;\r\n            for (let j = 0; j < nextList.length; j++) {\r\n                if (typesLeft[i] === nextList[j]) {\r\n                    remove = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (remove) {\r\n                typesLeft.splice(i, 1);\r\n            }\r\n        }\r\n    let randomTetro = typesLeft[Math.floor(Math.random() * typesLeft.length)];\r\n    return randomTetro;\r\n};\r\nconst getTetrominoProperties = (type) => {\r\n    return {\r\n        type: type,\r\n        shape: shape[type]\r\n    };\r\n};\r\n\r\nconst spawnTetromino = (tetromino, newPosition, dispatch, newOrientation, matrix) => {\r\n    let orientation = tetromino.orientation;\r\n    if (newOrientation !== undefined) {\r\n        orientation = newOrientation;\r\n    }\r\n    let pastCells = tetromino.cells;\r\n    let type = tetromino.type;\r\n    let tetrominoProps = tetromino.tetrominoProps;\r\n\r\n    let cellsToChange = [];\r\n    tetrominoProps.shape[orientation].forEach(coord => {\r\n        cellsToChange.push([newPosition[0] + coord[0], newPosition[1] + coord[1]]);\r\n    });\r\n    if (pastCells.length === 0) {\r\n        if (cellsToChange.some(cell => { if (matrix[cell[0]][cell[1]].tetromino !== \"none\") { return true; } return false; })) {\r\n                return false;\r\n        }\r\n    } else {\r\n        dispatch(changeMatrix(pastCells, \"none\"));\r\n    }\r\n    dispatch(changeMatrix(cellsToChange, type));\r\n    return cellsToChange;\r\n}\r\n\r\n// if called with the same position, refreshes the cells. Useful for rotating.\r\nconst changeTetrominoPosition = (tetromino, newPosition, dispatch, newOrientation, ghostY) => {\r\n    let orientation = tetromino.orientation;\r\n    if (newOrientation !== undefined) {\r\n        orientation = newOrientation;\r\n    }\r\n    let pastCells = tetromino.cells;\r\n    let pastGhostsCells = tetromino.ghostCells;\r\n    let type = tetromino.type;\r\n    let tetrominoProps = tetromino.tetrominoProps;\r\n\r\n    let cellsToChange = [];\r\n    let ghostsCells = [];\r\n    tetrominoProps.shape[orientation].forEach(coord => {\r\n        cellsToChange.push([newPosition[0] + coord[0], newPosition[1] + coord[1]]);\r\n        ghostsCells.push([newPosition[0] + coord[0], ghostY + coord[1]]);\r\n    });\r\n    dispatch(changeMatrix(pastCells, \"none\"));\r\n    dispatch(changeMatrix(pastGhostsCells, \"none\", true));\r\n    dispatch(changeMatrix(ghostsCells, type, true));\r\n    dispatch(changeMatrix(cellsToChange, type));\r\n    return [cellsToChange, ghostsCells];\r\n};\r\n\r\nconst cleanTetromino = (tetromino, dispatch) => {\r\n    dispatch(changeMatrix(tetromino.cells, \"none\"));\r\n    dispatch(changeMatrix(tetromino.ghostCells, \"none\"));\r\n};\r\n\r\nexport { getRandomTetromino, getTetrominoProperties, changeTetrominoPosition, spawnTetromino, cleanTetromino };","import React, { Component } from 'react';\r\nimport { getTetrominoProperties } from '../Tetromino/';\r\nimport './NextBox.css';\r\n\r\nclass NextCell extends Component {\r\n    render() {\r\n        return <div className={ \"next-cell \" + this.props.tetromino }></div>\r\n    }\r\n}\r\n\r\nclass NextBox extends Component {\r\n\r\n    render() {\r\n        let nextTetrominos = [];\r\n        let totalCells = 0;\r\n        for (let i = 0; i < this.props.nextTetrominos.length; i++) {\r\n            let cells = [];\r\n            let shape = getTetrominoProperties(this.props.nextTetrominos[i]).shape[2];\r\n            let size = (this.props.nextTetrominos[i] === \"I\") ? 4 : (this.props.nextTetrominos[i] === \"O\") ? 2 : 3;\r\n            for (let y = 1; y < 3; y++) {\r\n                for (let x = 0; x < size; x++) {\r\n                    let print = false;\r\n                    if (size === 3) {\r\n                        shape.forEach(element => {\r\n                            if (element[0] + 1 === x && element[1] + 1 === y) {\r\n                                print = true;\r\n                                return;\r\n                            }\r\n                        });\r\n                    } else if (size === 4) {\r\n                        shape.forEach(element => {\r\n                            if (element[0] + 2 === x && element[1] === y) {\r\n                                print = true;\r\n                                return;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        print = true;\r\n                    }\r\n                    \r\n                    totalCells += 1;\r\n                    if (print) {\r\n                        cells.push(<NextCell key={ totalCells } tetromino={ this.props.nextTetrominos[i] } />)\r\n                    } else {\r\n                        cells.push(<NextCell key={ totalCells } tetromino={ \"none\" } />)\r\n                    }\r\n                }\r\n            }\r\n            nextTetrominos.push(<div className={ \"next-matrix-\"+ size  } key={ i }>\r\n                {cells}\r\n            </div>);\r\n        }\r\n        return <div id=\"NextBox\">\r\n            <h2>NEXT</h2>\r\n            <div id=\"next-box\">\r\n                { nextTetrominos }\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default NextBox;","import {connect} from \"react-redux\";\r\nimport NextBox from '../components/NextBox';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        nextTetrominos: store.nextTetrominos,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (NextBox);","import React, { Component } from 'react';\r\nimport { getTetrominoProperties } from '../Tetromino/';\r\nimport './HoldBox.css';\r\n\r\nclass HoldCell extends Component {\r\n    render() {\r\n        return <div className={ \"hold-cell \" + this.props.tetromino }></div>\r\n    }\r\n}\r\n\r\nclass HoldBox extends Component {\r\n\r\n    render() {\r\n        let holding;\r\n        if (this.props.tetrominoHeld !== \"none\") {\r\n            holding = getTetrominoProperties(this.props.tetrominoHeld).shape[0];\r\n        }\r\n        \r\n        let matrix = [];\r\n        let width = (this.props.tetrominoHeld === \"I\") ? 4 : (this.props.tetrominoHeld === \"O\") ? 2 : 3;\r\n        for (let y = 0; y < 2; y++) {\r\n            let column = [];\r\n            for (let x = 0; x < width; x++) {\r\n                let tetromino = \"none\";\r\n                if (holding) {\r\n                    for (let i = 0; i < holding.length; i++) {\r\n                        switch(this.props.tetrominoHeld) {\r\n                            case(\"I\"):\r\n                                if (holding[i][0] + 2 === x && holding[i][1] + 1 === y) {\r\n                                    tetromino = this.props.tetrominoHeld;\r\n                                }\r\n                                break;\r\n                            case(\"O\"):\r\n                                if (holding[i][0] + 1 === x && holding[i][1] === y) {\r\n                                    tetromino = this.props.tetrominoHeld;\r\n                                }\r\n                                break;\r\n                            default:\r\n                                if (holding[i][0] + 1 === x && holding[i][1] + 1 === y) {\r\n                                    tetromino = this.props.tetrominoHeld;\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                column.push(<HoldCell key={ y * 3 + x * 4 } tetromino={ tetromino } />);\r\n            }\r\n            matrix.push(column);\r\n        }\r\n        \r\n        return <div id=\"HoldBox\">\r\n            <h2>HOLD</h2>\r\n            <div id=\"holder\">\r\n                <div id={\"hold-matrix-\" + width}>\r\n                    {matrix}\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default HoldBox;","import {connect} from \"react-redux\";\r\nimport HoldBox from '../components/HoldBox';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        tetrominoHeld: store.holding,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (HoldBox);","import React from 'react';\r\nimport './StatsBox.css';\r\n\r\nconst StatsBox = (props) => {\r\n        return <div id=\"StatsBox\">\r\n            <div className=\"col-xs-4 col-md-12\">\r\n                <h4>SCORE</h4>\r\n                <div className=\"stat\">\r\n                { props.score }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-xs-4 col-md-12\">\r\n                <h4>LEVEL</h4>\r\n                <div className=\"stat\">\r\n                { props.level }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-xs-4 col-md-12\">\r\n                <h4>LINES</h4>\r\n                <div className=\"stat\">\r\n                { props.lines }\r\n                </div>\r\n            </div>\r\n        </div>;\r\n}\r\n\r\nexport default StatsBox;","import {connect} from \"react-redux\";\r\nimport StatsBox from '../components/StatsBox';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        score: store.stats.score,\r\n        level: store.stats.level,\r\n        lines: store.stats.lines\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (StatsBox);","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport ControlInformation from '../ControlInformation';\r\nimport './PauseButton.css';\r\n\r\nclass PauseButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handler = this.handler.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n        this.handleBackToStart = this.handleBackToStart.bind(this);\r\n    }\r\n\r\n    handler() {\r\n        if (!this.props.paused)\r\n            this.props.handler();\r\n    }\r\n\r\n    handleCloseModal(event) {\r\n        this.props.handler(event);\r\n    }\r\n\r\n    handleBackToStart() {\r\n        this.props.backToStart();\r\n    }\r\n\r\n    render() {\r\n        let text = \"\";\r\n        let icon;\r\n        if (this.props.paused) {\r\n            text = <i className=\"fas fa-play\"></i>;\r\n        } else {\r\n            icon = <i id=\"PauseIcon\" className=\"fas fa-pause\"></i>;\r\n        }\r\n        return <div id=\"PauseButton\" className={((this.props.paused) ? \"paused\" : \"\") + \" unselectable\"} onClick={ this.handler }>\r\n            { icon }\r\n            <b>{text}</b>\r\n            <ReactModal\r\n                ariaHideApp={false}\r\n                isOpen={this.props.paused}\r\n                contentLabel=\"PAUSED\"\r\n                className=\"PauseModal\"\r\n                overlayClassName=\"PauseOverlay\"\r\n            >\r\n            <h1>PAUSE</h1>\r\n            <div id=\"PauseButtonGroup\">\r\n                <button className={ \"unselectable btn btn-success\" } onClick={ this.handleCloseModal }><i className=\"fas fa-play\"></i></button>\r\n                { (!( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) )) ? <ControlInformation isMobile={ this.props.isMobile } handler={ this.props.controlHandler } open={ this.props.openControls } /> : \"\" }\r\n                <button className={ \"unselectable btn btn-info\" } onClick={ this.handleBackToStart }><i className=\"fas fa-home\"></i></button>\r\n            </div>\r\n            </ReactModal>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default PauseButton;","import React from 'react';\r\nimport './FullScreenButton.css';\r\n\r\nconst FullScreenButton = (props) => {\r\n    var isChromium = window.chrome;\r\n    var winNav = window.navigator;\r\n    var vendorName = winNav.vendor;\r\n    var isOpera = typeof window.opr !== \"undefined\";\r\n    var isIEedge = winNav.userAgent.indexOf(\"Edge\") > -1;\r\n\r\n    if(\r\n    isChromium !== null &&\r\n    typeof isChromium !== \"undefined\" &&\r\n    vendorName === \"Google Inc.\" &&\r\n    isOpera === false &&\r\n    isIEedge === false\r\n    ) {\r\n        let icon = (props.fullscreen) ? <i className=\"fas fa-compress-arrows-alt\"></i> : <i className=\"fas fa-expand-arrows-alt\"></i>;\r\n        return <button id=\"FullScreenButton\" onClick={ props.handler }>{icon}</button>;\r\n    } else { \r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n    \r\n};\r\n\r\nexport default FullScreenButton;","import React from 'react';\r\nimport './VolumeButton.css';\r\n\r\nconst VolumeButton = (props) => {\r\n    let icon = (props.mute) ? <i className=\"fas fa-volume-mute\"></i> : <i className=\"fas fa-volume-up\"></i>;\r\n    return <button id=\"VolumeButton\" onClick={ props.handler }>{icon}</button>;\r\n};\r\n\r\nexport default VolumeButton;","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport './Leaderboard.css';\r\n\r\nclass Leaderboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let [isNewRecord, newPosition] = this.props.newRecord();\r\n        this.state = {\r\n            isNewRecord: isNewRecord,\r\n            newPosition: newPosition,\r\n            name: ''\r\n        };\r\n\r\n        this.setNewRecord = this.setNewRecord.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    setNewRecord() {\r\n        if (!this.state.isNewRecord) return;\r\n        this.props.setNewRecord(this.state.name, this.state.newPosition);\r\n        this.setState({\r\n            isNewRecord: false\r\n        });\r\n    }\r\n\r\n    onChange(e) {\r\n        const re = /[a-zA-Z0-9]{0,3}/;\r\n        if (e.target.value === '' || re.test(e.target.value)) {\r\n            this.setState({\r\n                name: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isNewRecord) {\r\n            return <ReactModal\r\n                ariaHideApp={false}\r\n                isOpen={true}\r\n                contentLabel=\"NEW RECORD\"\r\n                className=\"NewRecordModal\"\r\n                overlayClassName=\"NewRecordOverlay\"\r\n            >\r\n                <h1>NEW RECORD!!!</h1>\r\n                <label htmlFor=\"name\">Your Name:</label>\r\n                <input style={{ textAlign: 'center' }} id=\"name\" type='text' onChange={this.onChange} value={this.state.name}></input>\r\n                <button className={\"unselectable btn btn-success\"} onClick={this.setNewRecord}><i className=\"fas fa-save\"></i></button>\r\n            </ReactModal>;\r\n        } else {\r\n            let data = this.props.data;\r\n            let rows = [];\r\n            for (let i = 0; i < data.length; i++) {\r\n                rows.push(<tr key={i}><td>{data[i].name}</td><td style={{ float: 'right' }}>{data[i].score}</td></tr>);\r\n            }\r\n            return <div>\r\n                <h5 style={{ textAlign: 'center' }}>LEADERBOARD</h5>\r\n                <table className=\"table table-dark\" style={{ width: '250px' }}>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table></div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Leaderboard;","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport './GameOverModal.css';\r\nimport Leaderboard from '../Leaderboard';\r\n\r\nclass GameOverModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handlePlayAgain = this.handlePlayAgain.bind(this);\r\n        this.handleStartScreen = this.handleStartScreen.bind(this);\r\n    }\r\n\r\n    handlePlayAgain() {\r\n        this.props.restartGameHandler();\r\n    }\r\n\r\n    handleStartScreen() {\r\n        this.props.startScreenHandler();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.gameOver) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n        return <div id=\"GameOver\" className={\"\"} onClick={this.handler}>\r\n            <ReactModal\r\n                ariaHideApp={false}\r\n                isOpen={this.props.gameOver}\r\n                contentLabel=\"GAME OVER\"\r\n                className=\"GameOverModal\"\r\n                overlayClassName=\"GameOverOverlay\"\r\n            >\r\n                <h1>GAME OVER</h1>\r\n                <Leaderboard data={this.props.leaderboardData} newRecord={this.props.newRecord} setNewRecord={this.props.setNewRecord} />\r\n                <p>\r\n                    <b>SCORE:</b> {this.props.score}\r\n                </p>\r\n                <p>\r\n                    <b>LEVEL:</b> {this.props.level}\r\n                </p>\r\n                <p>\r\n                    <b>LINES:</b> {this.props.lines}\r\n                </p>\r\n                <div id=\"GameOverButtonGroup\">\r\n                    <button className={\"unselectable btn btn-success\"} onClick={this.handlePlayAgain}><i className=\"fas fa-redo-alt\"></i></button>\r\n                    <button className={\"unselectable btn btn-secondary\"} onClick={this.handleStartScreen}><i className=\"fas fa-home\"></i></button>\r\n                </div>\r\n            </ReactModal>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default GameOverModal;","import {connect} from \"react-redux\";\r\nimport GameOverModal from '../components/GameOverModal';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        score: store.stats.score,\r\n        level: store.stats.level,\r\n        lines: store.stats.lines\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (GameOverModal);","import React, { Component } from 'react';\r\nimport './Game.css';\r\nimport ControlInformation from '../ControlInformation';\r\nimport Matrix from \"../../containers/matrix\";\r\nimport NextBox from \"../../containers/next\";\r\nimport HoldBox from \"../../containers/hold\";\r\nimport StatsBox from \"../../containers/stat\";\r\nimport PauseButton from \"../PauseButton\";\r\nimport FullScreenButton from \"../FullScreenButton\";\r\nimport VolumeButton from '../VolumeButton';\r\nimport GameOverModal from '../../containers/gameover';\r\nimport { connect } from \"react-redux\";\r\nimport { getRandomTetromino, getTetrominoProperties, changeTetrominoPosition, spawnTetromino, cleanTetromino } from \"../Tetromino/\";\r\nimport { initNextTetrominos, startTimer, loadNewTetromino, copyMatrix, stopTimer, holdCurrentTetromino, resetGameState } from '../../actions';\r\nimport { addScore, addLines, reduceGravity } from '../../actions';\r\nimport { WIDTH, HEIGHT } from '../../constants';\r\n// gesture library\r\nimport Hammer from 'hammerjs';\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let storage = localStorage.getItem(\"reactTetris\") ?\r\n            JSON.parse(localStorage.getItem(\"reactTetris\"))\r\n            : { mute: false, leaderboard: [{ name: '', score: 6000 }, { name: '', score: 5000 }, { name: '', score: 4000 }, { name: '', score: 3000 }, { name: '', score: 2000 }] };\r\n        this.state = {\r\n            storage: storage,\r\n            running: false,\r\n            isMobile: (window.innerWidth < 768),\r\n            fullscreen: false,\r\n            gameOver: false,\r\n            paused: false,\r\n            mute: storage.mute,\r\n            showingControls: false,\r\n            tetromino: {},\r\n            rotate: false,\r\n            canRotate: true,\r\n            moveX: 0,\r\n            pushDown: false,\r\n            waitingToHold: false,\r\n            dropHard: false,\r\n            timeDropped: Date.now(),\r\n            // in miliseconds\r\n            lastTimeGravityWasApplied: Date.now()\r\n        }\r\n\r\n        this._music = React.createRef();\r\n\r\n        // game life cycle methods\r\n        this.startGame = this.startGame.bind(this);\r\n        this.listenForGestures = this.listenForGestures.bind(this);\r\n        this.gameTick = this.gameTick.bind(this);\r\n        this.gameOver = this.gameOver.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.returnToStartMenu = this.returnToStartMenu.bind(this);\r\n\r\n        // core game methods\r\n        this.spawnNextTetromino = this.spawnNextTetromino.bind(this);\r\n        this.linesAchieved = this.linesAchieved.bind(this);\r\n        this.turnTetrominoIntoCells = this.turnTetrominoIntoCells.bind(this);\r\n        this.moveTetromino = this.moveTetromino.bind(this);\r\n        this.rotationCalculations = this.rotationCalculations.bind(this);\r\n        this.rotateTetromino = this.rotateTetromino.bind(this);\r\n        this.cleanCurrentTetromino = this.cleanCurrentTetromino.bind(this);\r\n        this.holdTetromino = this.holdTetromino.bind(this);\r\n        this.dropItHard = this.dropItHard.bind(this);\r\n        this.calculateGhostPieceY = this.calculateGhostPieceY.bind(this);\r\n\r\n        // handlers\r\n        this.handlePauseButton = this.handlePauseButton.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.handleKeyUp = this.handleKeyUp.bind(this);\r\n        this.handleResize = this.handleResize.bind(this)\r\n        this.handleFullscreenClick = this.handleFullscreenClick.bind(this);\r\n        this.onFullscreenChange = this.onFullscreenChange.bind(this);\r\n        this.switchMute = this.switchMute.bind(this);\r\n        this.switchControls = this.switchControls.bind(this);\r\n        this.newRecord = this.newRecord.bind(this);\r\n        this.setNewRecord = this.setNewRecord.bind(this);\r\n\r\n        document.onfullscreenchange = this.onFullscreenChange;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.handleKeyDown, false);\r\n        document.addEventListener(\"keyup\", this.handleKeyUp, false);\r\n        window.addEventListener(\"resize\", this.handleResize, false);\r\n        let beforeLeaving = () => {\r\n            localStorage.setItem('reactTetris', JSON.stringify(this.state.storage));\r\n        };\r\n        window.onunload = beforeLeaving;\r\n        if (this.props.running) {\r\n            this.startGame();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.handleKeyDown, false);\r\n        document.removeEventListener(\"keyup\", this.handleKeyUp, false);\r\n        window.removeEventListener(\"resize\", this.handleResize, false);\r\n    }\r\n\r\n\r\n\r\n    // Game logic\r\n    startGame() {\r\n        if (this.state.running) return;\r\n        this.setState({\r\n            running: true\r\n        });\r\n        this.props.dispatch(initNextTetrominos(this.spawnNextTetromino()));\r\n        this.props.dispatch(startTimer(20, this.gameTick));\r\n    }\r\n\r\n    listenForGestures(matrixDOM) {\r\n        let mc = new Hammer(matrixDOM);\r\n        mc.add(new Hammer.Swipe({ event: 'swipeup', direction: Hammer.DIRECTION_UP }));\r\n        mc.add(new Hammer.Swipe({ event: 'swipeleft', direction: Hammer.DIRECTION_LEFT }));\r\n        mc.add(new Hammer.Swipe({ event: 'swiperight', direction: Hammer.DIRECTION_RIGHT }));\r\n        mc.add(new Hammer.Swipe({ event: 'swipedown', direction: Hammer.DIRECTION_DOWN }));\r\n        let doubletap = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            if (!this.state.waitingToHold) {\r\n                this.holdTetromino();\r\n            }\r\n        });\r\n        mc.on(\"doubletap\", doubletap);\r\n        let swipeup = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                rotate: true\r\n            });\r\n        });\r\n        mc.on(\"swipeup\", swipeup);\r\n        let swipeleft = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                moveX: -1\r\n            });\r\n        });\r\n        mc.on(\"swipeleft\", swipeleft);\r\n        let swiperight = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                moveX: 1\r\n            });\r\n        });\r\n        mc.on(\"swiperight\", swiperight);\r\n        let swipedown = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                dropHard: true\r\n            });\r\n        });\r\n        mc.on(\"swipedown\", swipedown);\r\n        let press = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                pushDown: true\r\n            });\r\n        });\r\n        mc.on(\"press\", press);\r\n        let pressup = ((ev) => {\r\n            if (this.state.gameOver || this.props.timer === -1)\r\n                return;\r\n            this.setState({\r\n                pushDown: false\r\n            });\r\n        });\r\n        mc.on(\"pressup\", pressup);\r\n        this._mc = mc;\r\n    }\r\n\r\n    gameTick() {\r\n        if (this.state.gameOver) return;\r\n        if (Date.now() - this.state.lastTimeGravityWasApplied > this.props.gravityInterval) {\r\n            this.moveTetromino(0, 1);\r\n            this.setState({\r\n                lastTimeGravityWasApplied: Date.now()\r\n            });\r\n        }\r\n        if (this.state.rotate) {\r\n            this.rotateTetromino();\r\n            this.setState({\r\n                rotate: false\r\n            });\r\n        }\r\n        if (this.state.moveX !== 0) {\r\n            this.moveTetromino(this.state.moveX, 0);\r\n            this.setState({\r\n                moveX: 0\r\n            });\r\n        }\r\n        if (this.state.pushDown) {\r\n            this.props.dispatch(addScore(this.props.level));\r\n            this.moveTetromino(0, 1);\r\n        }\r\n        if (this.state.dropHard) {\r\n            this.dropItHard();\r\n            this.setState({\r\n                dropHard: false\r\n            });\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        this.props.dispatch(stopTimer());\r\n        this.setState({\r\n            running: false,\r\n            gameOver: true\r\n        });\r\n        // freeze game and open a new dialog -> DONE\r\n        // show score and maybe implement a leaderboard\r\n        // give the choice to play again or go to the main menu\r\n    }\r\n\r\n    restartGame() {\r\n        localStorage.setItem('reactTetris', JSON.stringify(this.state.storage));\r\n        this.props.dispatch(resetGameState(this.props.gameKey));\r\n        this.props.refreshApp(true);\r\n    }\r\n\r\n    returnToStartMenu() {\r\n        this.setState({\r\n            running: false\r\n        });\r\n        localStorage.setItem('reactTetris', JSON.stringify(this.state.storage));\r\n        //this._mc.destroy();\r\n        this.props.dispatch(resetGameState(this.props.gameKey));\r\n        this.props.refreshApp(false);\r\n    }\r\n\r\n    spawnNextTetromino(next, waitForHolding) {\r\n        // spawn next tetromino with coordinates (5, 1)\r\n        let nextTetromino = (next === undefined) ? getRandomTetromino() : next;\r\n        let tetrominoProps = getTetrominoProperties(nextTetromino);\r\n\r\n        let newTetrominoObject = {\r\n            type: tetrominoProps.type,\r\n            cells: [],\r\n            ghostCells: [],\r\n            ghostPosition: [],\r\n            tetrominoProps: tetrominoProps,\r\n            position: [5, (tetrominoProps.type === \"O\" || tetrominoProps.type === \"I\") ? 0 : 1],\r\n            orientation: 0\r\n        };\r\n\r\n        newTetrominoObject.cells = spawnTetromino(newTetrominoObject, newTetrominoObject.position, this.props.dispatch, 0, this.props.matrix);\r\n\r\n        if (newTetrominoObject.cells === false) { // cannot spawn because cells are occupied, thus the game is over\r\n            this.gameOver();\r\n            return;\r\n        }\r\n\r\n        let ghostY = this.calculateGhostPieceY(newTetrominoObject, newTetrominoObject.position);\r\n        newTetrominoObject.ghostCells = this.getCellsByMoving(5, ghostY, tetrominoProps);\r\n        newTetrominoObject.ghostPosition = [5, ghostY];\r\n\r\n        this.setState({\r\n            tetromino: newTetrominoObject,\r\n            waitingToHold: (waitForHolding === undefined) ? false : waitForHolding\r\n        });\r\n\r\n        changeTetrominoPosition(newTetrominoObject, [5, newTetrominoObject.position[1]], this.props.dispatch, 0, this.calculateGhostPieceY(newTetrominoObject, newTetrominoObject.position));\r\n        return tetrominoProps.type;\r\n    }\r\n\r\n    /*\r\n    this function is called when a new line or lines is or are scored,\r\n    so it has to move all cells down by the number of lines completed\r\n    that is below them in the matrix\r\n    */\r\n    linesAchieved(completedLines) {\r\n        let newMatrix = [];\r\n        for (let x = 0; x < WIDTH; x++) {\r\n            let column = [];\r\n            for (let y = 0; y < HEIGHT; y++) {\r\n                column.push({ tetromino: 'none' });\r\n            }\r\n            newMatrix.push(column);\r\n        }\r\n        for (let i = completedLines.length - 1; i >= 0; i--) {\r\n            let rowToClean = completedLines[i];\r\n            for (let y = rowToClean; y >= 0; y--) {\r\n                let amountToMove = completedLines.length - i;\r\n                for (let x = 0; x < WIDTH; x++) {\r\n                    if (y === rowToClean) {\r\n                        newMatrix[x][y].tetromino = \"none\";\r\n                    } else {\r\n                        newMatrix[x][y + amountToMove].tetromino = this.props.matrix[x][y].tetromino;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let score = 0;\r\n        switch (completedLines.length) {\r\n            case (1):\r\n                score = 100 * this.props.level;\r\n                break;\r\n            case (2):\r\n                score = 400 * this.props.level;\r\n                break;\r\n            case (3):\r\n                score = 900 * this.props.level;\r\n                break;\r\n            case (4):\r\n                score = 2000 * this.props.level;\r\n                break;\r\n            default:\r\n                score = 1000;\r\n                for (let i = 5; i <= completedLines.length; i++) {\r\n                    score *= i;\r\n                }\r\n                score *= this.props.level;\r\n                break;\r\n        }\r\n        this.props.dispatch(addScore(score));\r\n        this.props.dispatch(copyMatrix(newMatrix, completedLines[completedLines.length - 1]));\r\n        let currentLevel = this.props.level;\r\n        this.props.dispatch(addLines(completedLines.length));\r\n        if (this.props.level !== currentLevel) {\r\n            this.props.dispatch(reduceGravity(Math.floor(200 * (1 / (currentLevel * 0.65)))));\r\n        }\r\n    }\r\n\r\n    turnTetrominoIntoCells() {\r\n        // once a tetromino lands, check if a line has been completed, spawn next one and update nextTetrominos array\r\n        let cells = this.state.tetromino.cells;\r\n\r\n        // an array containing the rows that have a new cell occupied because of the tetromino that just landed\r\n        let possibleLines = [];\r\n        // iterate through the cells array to find the rows affected by the tetromino that just landed\r\n        cells.forEach(element => {\r\n            let contained = possibleLines.some(storedLine => {\r\n                if (element[1] === storedLine) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (!contained) {\r\n                possibleLines.push(element[1]);\r\n            }\r\n        });\r\n        let completedLines = [];\r\n        for (let i = 0; i < possibleLines.length; i++) {\r\n            let complete = true;\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                // if one cell is empty, then is not a full line\r\n                if (this.props.matrix[x][possibleLines[i]] && this.props.matrix[x][possibleLines[i]].tetromino === \"none\") {\r\n                    complete = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (complete)\r\n                completedLines.push(possibleLines[i]);\r\n        }\r\n        if (completedLines.length !== 0) {\r\n            this.linesAchieved(completedLines.sort());\r\n        }\r\n\r\n        if (this.state.isMobile && this.state.pushDown) {\r\n            this.setState({\r\n                pushDown: false\r\n            });\r\n        }\r\n\r\n        this.spawnNextTetromino(this.props.nextTetromino);\r\n        this.props.dispatch(loadNewTetromino());\r\n\r\n    }\r\n\r\n    checkCollisionsByMoving(x, y, tetromino) {\r\n        let pastPosition = tetromino.position;\r\n        let currentShape = tetromino.tetrominoProps.shape[tetromino.orientation];\r\n        let currentCells = tetromino.cells;\r\n        let canMove = true;\r\n\r\n        // first check with the borders of the matrix\r\n        currentShape.some(element => {\r\n            let newX = pastPosition[0] + element[0] + x;\r\n            if (newX < 0 || newX > WIDTH - 1) {\r\n                canMove = false;\r\n                return true;\r\n            }\r\n            let newY = pastPosition[1] + element[1] + y;\r\n            if (newY < 0 || newY > HEIGHT - 1) {\r\n                canMove = false;\r\n                return true;\r\n            }\r\n            // after that check for any existing cell\r\n            let contained = currentCells.some(el => {\r\n                if (el[0] === newX && el[1] === newY)\r\n                    return true;\r\n                return false;\r\n            });\r\n            if (!contained && this.props.matrix[newX][newY].tetromino !== \"none\" && !this.props.matrix[newX][newY].ghost) {\r\n                canMove = false;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return canMove;\r\n    }\r\n\r\n    getCellsByMoving(x, y, tetrominoProps) {\r\n        let tempCells = [];\r\n        tetrominoProps.shape[0].forEach(coord => {\r\n            tempCells.push([x + coord[0], y + coord[1]]);\r\n        });\r\n        return tempCells;\r\n    }\r\n\r\n    moveTetromino(x, y) {\r\n        let pastPosition = this.state.tetromino.position;\r\n\r\n        // check collisions\r\n        let canMove = this.checkCollisionsByMoving(x, y, this.state.tetromino);\r\n        if (!canMove) {\r\n            if (y === 1) {\r\n                this.turnTetrominoIntoCells();\r\n                return false;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        // after checking collisions, set new position\r\n        let finalX = pastPosition[0];\r\n        let finalY = pastPosition[1];\r\n        finalX += x;\r\n        finalY += y;\r\n        let newPosition = [finalX, finalY];\r\n        let ghostY = this.calculateGhostPieceY(this.state.tetromino, newPosition);\r\n        let [cellsToChange, ghostCells] = changeTetrominoPosition(this.state.tetromino, newPosition, this.props.dispatch, this.state.tetromino.orientation, ghostY);\r\n\r\n        this.setState({\r\n            tetromino: {\r\n                ...this.state.tetromino,\r\n                cells: cellsToChange,\r\n                ghostCells: ghostCells,\r\n                ghostPosition: [newPosition[0], ghostY],\r\n                position: newPosition,\r\n            }\r\n        });\r\n        return canMove;\r\n    }\r\n\r\n    rotationCalculations(newX, newY, currentCells) {\r\n        if (newX < 0 || newX > WIDTH - 1) {\r\n            return [true, \"no\"];\r\n        }\r\n        if (newY < 0 || newY > HEIGHT - 1) {\r\n            return [true, \"no\"];\r\n        }\r\n        let contained = currentCells.some(el => {\r\n            if (el[0] === newX && el[1] === newY)\r\n                return true;\r\n            return false;\r\n        });\r\n        if (!contained && this.props.matrix[newX][newY].tetromino !== \"none\") {\r\n            return [true, \"no\"];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // true -> right, false -> left\r\n    rotateTetromino() {\r\n        // I have designed my wall kick system (how to rotate a tetromino when it's against a wall)\r\n        // following this site's rules https://tetris.fandom.com/wiki/TGM_Rotation\r\n\r\n        let newOrientation = (this.state.tetromino.orientation + 1 > 3) ? 0 : this.state.tetromino.orientation + 1;\r\n        let position = this.state.tetromino.position;\r\n        let currentCells = this.state.tetromino.cells;\r\n        // get the current shape of the tetromino\r\n        // \"yes\" if it can without wall kick, \"no\" if it can't without wall kick, \"right\" if it has to move 1 block to the right and \"left\" if it has to move 1 block to the left\r\n        let canRotate = \"yes\";\r\n        // edge case. when the tetromino I is rotated with the center in a bad spot and near a matrix edge\r\n        if (this.state.tetromino.type === \"I\" && ((position[0] === 10 && this.state.tetromino.orientation === 3) || (position[0] === 0 && this.state.tetromino.orientation === 1))) {\r\n            newOrientation = (newOrientation === 0) ? 2 : 0;\r\n            if (position[0] === 10) {\r\n                position = [position[0] - 1, position[1]];\r\n            } else {\r\n                position = [position[0] + 1, position[1]];\r\n            }\r\n        }\r\n        let nextShape = this.state.tetromino.tetrominoProps.shape[newOrientation];\r\n\r\n        nextShape.some(element => {\r\n            let newX = position[0] + element[0];\r\n            let newY = position[1] + element[1];\r\n            let result = this.rotationCalculations(newX, newY, currentCells);\r\n            if (result[1] !== undefined)\r\n                canRotate = result[1];\r\n            return result[0];\r\n        });\r\n        // it can't perform a basic rotation, so we check for the wall kicks\r\n        if (canRotate === \"no\") {\r\n            canRotate = \"right\";\r\n            nextShape.some(element => {\r\n                let newX = position[0] + element[0] + 1;\r\n                let newY = position[1] + element[1];\r\n                let result = this.rotationCalculations(newX, newY, currentCells);\r\n                if (result[1] !== undefined)\r\n                    canRotate = result[1];\r\n                return result[0];\r\n            });\r\n            if (canRotate === \"no\") {\r\n                canRotate = \"left\";\r\n                nextShape.some(element => {\r\n                    let newX = position[0] + element[0] - 1;\r\n                    let newY = position[1] + element[1];\r\n                    let result = this.rotationCalculations(newX, newY, currentCells);\r\n                    if (result[1] !== undefined)\r\n                        canRotate = result[1];\r\n                    return result[0];\r\n                });\r\n            }\r\n        }\r\n        if (canRotate === \"no\") {\r\n            return;\r\n        }\r\n        let newPosition = [position[0], position[1]]\r\n        switch (canRotate) {\r\n            case (\"right\"):\r\n                newPosition[0] += 1;\r\n                break;\r\n            case (\"left\"):\r\n                newPosition[0] -= 1;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        let ghostY = this.calculateGhostPieceY(this.state.tetromino, newPosition, newOrientation);\r\n        let [cellsToChange, ghostCells] = changeTetrominoPosition(this.state.tetromino, newPosition, this.props.dispatch, newOrientation, ghostY);\r\n\r\n        this.setState({\r\n            tetromino: {\r\n                ...this.state.tetromino,\r\n                position: newPosition,\r\n                cells: cellsToChange,\r\n                ghostCells: ghostCells,\r\n                ghostPosition: [newPosition[0], ghostY],\r\n                orientation: newOrientation\r\n            }\r\n        });\r\n    }\r\n\r\n    cleanCurrentTetromino() {\r\n        cleanTetromino(this.state.tetromino, this.props.dispatch);\r\n    }\r\n\r\n    holdTetromino() {\r\n        let currentTetrominoType = this.state.tetromino.type;\r\n        this.setState({\r\n            waitingToHold: true\r\n        });\r\n        this.cleanCurrentTetromino();\r\n        if (this.props.tetrominoHeld !== \"none\") {\r\n            this.spawnNextTetromino(this.props.tetrominoHeld, true);\r\n        } else {\r\n            this.spawnNextTetromino(this.props.nextTetromino, true);\r\n            this.props.dispatch(loadNewTetromino());\r\n        }\r\n        this.props.dispatch(holdCurrentTetromino(currentTetrominoType));\r\n    }\r\n\r\n    dropItHard() {\r\n        if (Date.now() - this.state.timeDropped < 100) return;\r\n        let dropAmount = this.state.tetromino.ghostPosition[1] - this.state.tetromino.position[1];\r\n        this.moveTetromino(0, dropAmount);\r\n        // for triggering the next tetromino\r\n        this.moveTetromino(0, 1);\r\n        let score = dropAmount * this.props.level;\r\n        this.props.dispatch(addScore(score));\r\n        this.setState({\r\n            timeDropped: Date.now()\r\n        });\r\n    }\r\n\r\n    // returns the Y coordinate of the ghost piece\r\n    calculateGhostPieceY(tetromino, newPosition, newOrientation) {\r\n        let tetro;\r\n        if (tetromino)\r\n            tetro = Object.assign({}, tetromino);\r\n        else\r\n            tetro = Object.assign({}, this.state.tetromino);\r\n        let position = (newPosition) ? newPosition : tetro.position;\r\n        tetro.position = position;\r\n\r\n        if (typeof (newOrientation) === \"number\") tetro.orientation = newOrientation;\r\n        for (let y = position[1] + 1; y <= HEIGHT; y++) {\r\n            if (!this.checkCollisionsByMoving(0, y - position[1], tetro)) {\r\n                return y - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePauseButton() {\r\n        if (this.state.gameOver) return;\r\n        if (this.props.timer !== -1) {\r\n            this.props.dispatch(stopTimer());\r\n            this.setState({\r\n                paused: true\r\n            });\r\n        } else {\r\n            this.props.dispatch(startTimer(60, this.gameTick));\r\n            this.setState({\r\n                paused: false\r\n            });\r\n        }\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        if (this.state.gameOver || this.props.timer === -1)\r\n            return;\r\n        switch (event.key) {\r\n            case (\"ArrowRight\"):\r\n                this.setState({\r\n                    moveX: 1\r\n                });\r\n                break;\r\n            case (\"ArrowLeft\"):\r\n                this.setState({\r\n                    moveX: -1\r\n                });\r\n                break;\r\n            case (\"ArrowUp\"):\r\n                if (this.state.canRotate) {\r\n                    this.setState({\r\n                        rotate: true,\r\n                        canRotate: false\r\n                    });\r\n                }\r\n                break;\r\n            case (\"ArrowDown\"):\r\n                this.setState({\r\n                    pushDown: true\r\n                });\r\n                break;\r\n            case (\"c\" || \"C\"): // hold\r\n                if (!this.state.waitingToHold) {\r\n                    this.holdTetromino();\r\n                }\r\n                break;\r\n            case (\" \"): // hard drop\r\n                this.setState({\r\n                    dropHard: true\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleKeyUp(event) {\r\n        if (this.state.gameOver || this.props.timer === -1)\r\n            return;\r\n        switch (event.key) {\r\n            case (\"ArrowUp\"):\r\n                if (!this.state.canRotate) {\r\n                    this.setState({\r\n                        canRotate: true\r\n                    });\r\n                }\r\n                break;\r\n            case (\"ArrowDown\"):\r\n                this.setState({\r\n                    pushDown: false\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleResize() {\r\n        if (window.innerWidth < 768) {\r\n            this.setState({ isMobile: true });\r\n        } else {\r\n            this.setState({ isMobile: false });\r\n        }\r\n    }\r\n\r\n    handleFullscreenClick() {\r\n        if (!this.state.fullscreen)\r\n            document.body.requestFullscreen()\r\n        else\r\n            document.exitFullscreen()\r\n    }\r\n\r\n    onFullscreenChange() {\r\n        this.setState({\r\n            fullscreen: !this.state.fullscreen\r\n        });\r\n    }\r\n\r\n    switchMute() {\r\n        this.setState({\r\n            storage: { ...this.state.storage, mute: !this.state.mute },\r\n            mute: !this.state.mute\r\n        });\r\n    }\r\n\r\n    switchControls() {\r\n        this.setState({\r\n            showingControls: !this.state.showingControls\r\n        });\r\n    }\r\n\r\n    newRecord() {\r\n        let score = this.props.score;\r\n        let leaderboard = this.state.storage.leaderboard;\r\n        let isNewRecord = false;\r\n        let newPosition;\r\n        for (let i = 0; i < leaderboard.length; i++) {\r\n            if (score > leaderboard[i].score) {\r\n                newPosition = i;\r\n                isNewRecord = true;\r\n                break;\r\n            }\r\n        }\r\n        return [isNewRecord, newPosition];\r\n    }\r\n\r\n    setNewRecord(name, newPosition) {\r\n        let leaderboard = this.state.storage.leaderboard.slice();\r\n        leaderboard.splice(newPosition, 0, { name: name, score: this.props.score });\r\n        leaderboard.pop();\r\n        this.setState({\r\n            storage: { ...this.state.storage, leaderboard: leaderboard }\r\n        });\r\n        localStorage.setItem('reactTetris', JSON.stringify(this.state.storage));\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.running && !this.state.gameOver) {\r\n            return <div id=\"Start\" className=\"unselectable container\" style={{ maxWidth: \"unset\", backgroundColor: '#4c64ff' }}>\r\n                <div className=\"col-xs-12\" style={{ textAlign: 'center' }}>\r\n                    <h1 id=\"Title\">\r\n                        <p style={{ color: \"red\", display: \"inline\" }}>t</p>\r\n                        <p style={{ color: \"rgb(224, 146, 0)\", display: \"inline\" }}>e</p>\r\n                        <p style={{ color: \"yellow\", display: \"inline\" }}>t</p>\r\n                        <p style={{ color: \"lime\", display: \"inline\" }}>r</p>\r\n                        <p style={{ color: \"cyan\", display: \"inline\" }}>i</p>\r\n                        <p style={{ color: \"#d800d8\", display: \"inline\" }}>s</p>\r\n                    </h1>\r\n                    <button id=\"StartButton\" className=\"btn btn-success\" onClick={this.startGame} >START</button>\r\n                    <ControlInformation startScreen={true} isMobile={this.state.isMobile} open={this.state.showingControls} handler={this.switchControls} />\r\n                </div>\r\n            </div>;\r\n        }\r\n        if (this._music.current !== null) {\r\n            if (this._music.current.paused & !this.state.mute) {\r\n                this._music.current.play();\r\n            } else if (!this._music.current.paused & this.state.mute) {\r\n                this._music.current.pause();\r\n            }\r\n        }\r\n        let pauseButton = <PauseButton\r\n            paused={this.state.paused}\r\n            handler={this.handlePauseButton}\r\n            isMobile={this.state.isMobile}\r\n            controlHandler={this.switchControls}\r\n            openControls={this.state.showingControls}\r\n            backToStart={this.returnToStartMenu}\r\n        />;\r\n\r\n        let gameOverModal = <GameOverModal\r\n            gameOver={this.state.gameOver}\r\n            restartGameHandler={this.restartGame}\r\n            startScreenHandler={this.returnToStartMenu}\r\n            leaderboardData={this.state.storage.leaderboard}\r\n            newRecord={this.newRecord}\r\n            setNewRecord={this.setNewRecord}\r\n        />;\r\n        let controls = <div id=\"MobileControls\">\r\n        <div>\r\n                <button className=\"btn btn-primary\" onClick={() => { if (this.state.canRotate) { this.setState({ rotate: true }); } }}><i className=\"fas fa-sync-alt\"></i></button>\r\n                <button className=\"btn btn-primary\" onClick={() => this.setState({ moveX: -1 })}><i className=\"fas fa-arrow-left\"></i></button>\r\n                <button className=\"btn btn-primary\" onClick={() => this.setState({ moveX: 1 })} ><i className=\"fas fa-arrow-right\"></i></button>\r\n                </div><div>\r\n                <button className=\"btn btn-primary\" style={(this.state.pushDown) ? { backgroundColor: 'black', color: 'white' } : {}} onClick={() => this.setState({ pushDown: !this.state.pushDown })}><i className=\"fas fa-chevron-down\"></i></button>\r\n                <button className=\"btn btn-primary\" onClick={() => this.setState({ dropHard: true })}><i className=\"fas fa-level-down-alt\"></i></button>\r\n                <button className=\"btn btn-primary\" onClick={() => { if (!this.state.waitingToHold) { this.holdTetromino() } }}><i className=\"fas fa-briefcase\"></i></button>\r\n                </div>\r\n            </div>;\r\n        if (this.state.isMobile) {\r\n            return <div id=\"Game\" className=\"unselectable container\">\r\n                <audio ref={this._music} src=\"./soundtrack.mp3\" loop={true} />\r\n                <div id=\"Panel\" className=\"col-xs-12 col-md-3\">\r\n                    <div className=\"col-xs-2 col-md-12\" id=\"left-panel\">\r\n                        <HoldBox />\r\n                        <div>\r\n                            {pauseButton}\r\n                            <VolumeButton mute={this.state.mute} handler={this.switchMute} />\r\n                            <FullScreenButton fullscreen={this.state.fullscreen} handler={this.handleFullscreenClick} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-xs-8 col-md-12\">\r\n                        <StatsBox />\r\n                        <NextBox />\r\n                    </div>\r\n                </div>\r\n                <div id=\"social-buttons\">\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tomas302\"><i className=\"fab fa-github\"></i></a>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/tom%C3%A1s-dornell-bonilla-b64a62177/\"><i className=\"fab fa-linkedin\"></i></a>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tomas302.github.io/\"><i className=\"fas fa-user-circle\"></i></a>\r\n                    </div>\r\n                <div className=\"col-xs-12 col-md-5\" style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Matrix gestureListener={this.listenForGestures} ref={this._matrix} />\r\n                </div>\r\n                {controls}\r\n                {gameOverModal}\r\n            </div>;\r\n        } else {\r\n            if(!( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) )) {\r\n                controls = [];\r\n            }\r\n            return <div id=\"Game\" className=\"unselectable\">\r\n                <audio ref={this._music} src=\"./soundtrack.mp3\" loop={true} />\r\n                <div id=\"left-panel\">\r\n                    <HoldBox />\r\n                    <StatsBox />\r\n                </div>\r\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                    <Matrix gestureListener={this.listenForGestures} ref={this._matrix} />\r\n                    {controls}\r\n                    <div id=\"social-buttons\">\r\n                        <h5>Coded by Thomas Dornell</h5>\r\n                        <h6>Check me out!</h6>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tomas302\"><i className=\"fab fa-github\"></i></a>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/tom%C3%A1s-dornell-bonilla-b64a62177/\"><i className=\"fab fa-linkedin\"></i></a>\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tomas302.github.io/\"><i className=\"fas fa-user-circle\"></i></a>\r\n                    </div>\r\n                </div>\r\n                <div id=\"right-panel\">\r\n                    <div className=\"row\">\r\n                        {pauseButton}\r\n                        <VolumeButton mute={this.state.mute} handler={this.switchMute} />\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <NextBox />\r\n                    </div>\r\n                </div>\r\n                {gameOverModal}\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect()(Game);","import {connect} from \"react-redux\";\r\nimport Game from '../components/Game';\r\n\r\nfunction mapStateToProps(store){\r\n    return {\r\n        gameKey: store.gameKey,\r\n        score: store.stats.score,\r\n        matrix: store.matrix,\r\n        nextTetromino: store.nextTetrominos[0],\r\n        timer: store.timer,\r\n        tetrominoHeld: store.holding,\r\n        level: store.stats.level,\r\n        gravityInterval: store.gravityInterval\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (Game);","\r\n\r\nwindow.accurateInterval = function(fn, time) {\r\n    var cancel, nextAt, timeout, wrapper;\r\n    nextAt = new Date().getTime() + time;\r\n    timeout = null;\r\n    wrapper = function() {\r\n      nextAt += time;\r\n      timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n      return fn();\r\n    };\r\n    cancel = function() {\r\n      return clearTimeout(timeout);\r\n    };\r\n    timeout = setTimeout(wrapper, nextAt - new Date().getTime());\r\n    return {\r\n      cancel: cancel\r\n    };\r\n};\r\n\r\nconst timer = (state = -1, action) => {\r\n    switch(action.type) {\r\n        case 'START_TIMER':\r\n            return window.accurateInterval(action.fn, action.delay);\r\n        case 'STOP_TIMER':\r\n            if (state === -1) {\r\n              return -1;\r\n            }\r\n            state.cancel()\r\n            return -1;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default timer;","import { WIDTH, HEIGHT } from '../constants';\r\n\r\n\r\n// 2D array containing all the cells in the Matrix. It has the form 'cells[x][y]'\r\nconst getInitialMatrix = () => {\r\n    let initialMatrix = [];\r\n    for (let x = 0; x < WIDTH; x++) {\r\n        let column = [];\r\n        for (let y = 0; y < HEIGHT; y++) {\r\n            column.push({ tetromino: 'none' });\r\n        }\r\n        initialMatrix.push(column);\r\n    }\r\n    return initialMatrix;\r\n};\r\n\r\n\r\nconst matrix = (state = getInitialMatrix(), action) => {\r\n    let newMatrix;\r\n    switch(action.type) {\r\n        case 'RESET_GAME_STATE':\r\n            return getInitialMatrix();\r\n        case 'CHANGE_MATRIX':\r\n            newMatrix = Object.assign({}, state);\r\n            for (let i = 0; i < action.cells.length; i++) {\r\n                let cell = action.cells[i];\r\n                if(!newMatrix[cell[0]][cell[1]]) continue;\r\n                if (action.ghost) {\r\n                    if(newMatrix[cell[0]][cell[1]].tetromino !== \"none\" && !newMatrix[cell[0]][cell[1]].ghost) continue;\r\n                    newMatrix[cell[0]][cell[1]].ghost = true;\r\n                    if (newMatrix[cell[0]][cell[1]]) {\r\n                        newMatrix[cell[0]][cell[1]].tetromino = action.tetromino;\r\n                    }\r\n                } else if (newMatrix[cell[0]][cell[1]].ghost) {\r\n                    if(newMatrix[cell[0]][cell[1]].tetromino !== \"none\" && !newMatrix[cell[0]][cell[1]].ghost) continue;\r\n                    newMatrix[cell[0]][cell[1]].ghost = undefined;\r\n                    newMatrix[cell[0]][cell[1]].tetromino = action.tetromino;\r\n                } else {\r\n                    newMatrix[cell[0]][cell[1]].tetromino = action.tetromino;\r\n                }\r\n            }\r\n            return newMatrix;\r\n        case 'COPY_MATRIX':\r\n            newMatrix = action.newMatrix;\r\n            let lowerLine = action.lowerLine;\r\n            if (lowerLine + 1 < HEIGHT) {\r\n                for (let y = lowerLine + 1; y < HEIGHT; y++) {\r\n                    for (let x = 0; x < WIDTH; x++) {\r\n                        newMatrix[x][y].tetromino = state[x][y].tetromino;\r\n                    }\r\n                }\r\n                return newMatrix;\r\n            } else {\r\n                return newMatrix;\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default matrix;","import { getRandomTetromino } from '../components/Tetromino/'\r\n\r\nconst next = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'INIT_NEXT_TETROMINOS':\r\n            return getRandomTetromino(3, [action.currentTetro]);\r\n        case 'LOAD_NEW_TETROMINO':\r\n            return [state[1], state[2], getRandomTetromino(null, state)]\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default next;","const hold = (state = \"none\", action) => {\r\n    switch(action.type) {\r\n        case 'HOLD':\r\n            return action.tetromino;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default hold;","const defaultState = {\r\n    score: 0,\r\n    level: 1,\r\n    lines: 0\r\n};\r\n\r\nconst stat = (state = defaultState, action) => {\r\n    switch(action.type) {\r\n        case 'ADD_SCORE':\r\n            return {...state, score: state.score + action.points};\r\n        case 'ADD_LINES':\r\n            let pastLinesStr = state.lines.toString();\r\n            let newLinesStr = (state.lines + action.lines).toString();\r\n            let addLevel;\r\n            if (pastLinesStr.length > 1) {\r\n                if (newLinesStr[pastLinesStr.length - 2] > pastLinesStr[pastLinesStr.length - 2]) {\r\n                    addLevel = newLinesStr[pastLinesStr.length - 2] - pastLinesStr[pastLinesStr.length - 2]\r\n                }\r\n            } else if (newLinesStr.length > 1) {\r\n                addLevel = newLinesStr.length - 1;\r\n            }\r\n            return {...state, lines: state.lines + action.lines, level: state.level + ((addLevel !== undefined) ? addLevel : 0)};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default stat;","const gravity = (state = 800, action) => {\r\n    switch(action.type) {\r\n        case 'REDUCE_GRAVITY':\r\n            let newGravity = state - action.amount;\r\n            if (newGravity < 60) {\r\n                return 60;\r\n            }\r\n            return newGravity;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default gravity;","const gameKey = (state = 0, action) => {\r\n    if (action.type === 'RESET_GAME_STATE') {\r\n        state = action.gameKey + 1;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default gameKey;","import { appReducers } from './index';\r\n\r\nconst game = (state, action) => {\r\n    if(action.type === 'RESET_GAME_STATE') {\r\n        state = undefined;\r\n    }\r\n    return appReducers(state, action);\r\n};\r\n\r\nexport default game;","import { combineReducers } from 'redux'\r\nimport timer from \"./timer\";\r\nimport matrix from \"./matrix\";\r\nimport next from \"./next\";\r\nimport hold from \"./hold\";\r\nimport stat from \"./stat\";\r\nimport gravity from \"./gravity\";\r\nimport gameKey from \"./gameKey\";\r\nimport rootReducer from './game';\r\n\r\n\r\nexport const appReducers = combineReducers({\r\n  gameKey: gameKey,\r\n  timer: timer,\r\n  matrix: matrix,\r\n  nextTetrominos: next,\r\n  holding: hold,\r\n  stats: stat,\r\n  gravityInterval: gravity\r\n});\r\n\r\nexport default rootReducer;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './containers/game';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/'\n\nconst store = createStore(rootReducer);\n\ndocument.addEventListener('touchmove', function(event) {\n  event = event.originalEvent || event;\n  if (event.scale !== 1) {\n     event.preventDefault();\n  }\n}, false);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      startAgain: false\n    };\n\n    this.refreshApp = this.refreshApp.bind(this);\n  }\n  \n  refreshApp(startAgain) {\n    this.forceUpdate();\n    this.setState({\n      startAgain: startAgain\n    });\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div id=\"App\">\n          <Game key={ store.getState().gameKey } refreshApp={ this.refreshApp } running={ this.state.startAgain } />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}